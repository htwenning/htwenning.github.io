<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wenning's blog - Linux, Docker</title><link href="https://htwenning.github.io/" rel="alternate"></link><link href="https://htwenning.github.io/feeds/linux-docker.atom.xml" rel="self"></link><id>https://htwenning.github.io/</id><updated>2018-07-12T00:00:00+08:00</updated><entry><title>a little docker-compose</title><link href="https://htwenning.github.io/a-little-docker-compose.html" rel="alternate"></link><published>2018-07-12T00:00:00+08:00</published><updated>2018-07-12T00:00:00+08:00</updated><author><name>wenning</name></author><id>tag:htwenning.github.io,2018-07-12:/a-little-docker-compose.html</id><summary type="html">&lt;h1&gt;a little docker-compose&lt;/h1&gt;
&lt;p&gt;docker-compose 可以快速给一个临时的linux开发环境&lt;/p&gt;
&lt;p&gt;docker-compose run service_name&lt;/p&gt;
&lt;p&gt;--rm参数可以在退出的时候删除这个container&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目下面创建 docker-compose.yml, 内容如下
（cap_add和secutiry_opt用来保证container中可以正常使用gdb）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;python:3.6&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;.:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cap_add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
    &lt;span class="n"&gt;security_opt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;seccomp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;unconfined&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动并attach bash:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose run app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果上面指定了ports那么需要带上 --service-ports 参数才能把服务的ports暴露给host&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose run --service-ports app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;退出后container也就挂掉了，通过docker ps …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;a little docker-compose&lt;/h1&gt;
&lt;p&gt;docker-compose 可以快速给一个临时的linux开发环境&lt;/p&gt;
&lt;p&gt;docker-compose run service_name&lt;/p&gt;
&lt;p&gt;--rm参数可以在退出的时候删除这个container&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目下面创建 docker-compose.yml, 内容如下
（cap_add和secutiry_opt用来保证container中可以正常使用gdb）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;python:3.6&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;.:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cap_add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;
    &lt;span class="n"&gt;security_opt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;seccomp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;unconfined&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动并attach bash:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose run app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果上面指定了ports那么需要带上 --service-ports 参数才能把服务的ports暴露给host&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose run --service-ports app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;退出后container也就挂掉了，通过docker ps -a 查看container_id, 后面再启动：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker start [container_id]&lt;/p&gt;
&lt;p&gt;docker attach [container_id]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者执行一个新的bash命令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker exec -it [container_id] bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据需要可以commit镜像&lt;/li&gt;
&lt;li&gt;可以写Dockerfile和更多的service, 利用docker-compose up启动&lt;/li&gt;
&lt;li&gt;docker-compose up用来启动一堆服务，没有交互式的概念&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://docs.docker.com/compose/&lt;/li&gt;
&lt;/ul&gt;</content><category term="Linux, Docker"></category></entry></feed>