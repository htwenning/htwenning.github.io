<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wenning's blog</title><link href="https://htwenning.github.io/" rel="alternate"></link><link href="https://htwenning.github.io/feeds/all.atom.xml" rel="self"></link><id>https://htwenning.github.io/</id><updated>2018-09-29T00:00:00+08:00</updated><entry><title>Install Xposed on AVD</title><link href="https://htwenning.github.io/install-xposed-on-avd.html" rel="alternate"></link><published>2018-09-29T00:00:00+08:00</published><updated>2018-09-29T00:00:00+08:00</updated><author><name>wenning</name></author><id>tag:htwenning.github.io,2018-09-29:/install-xposed-on-avd.html</id><summary type="html">&lt;h1&gt;Install Xposed on AVD&lt;/h1&gt;
&lt;p&gt;在avd上获取root权限，安装xposed framework&lt;/p&gt;
&lt;h3&gt;模拟器准备工作：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;./sdkmanager "system-images;android-22;google_apis;x86"&lt;/li&gt;
&lt;li&gt;./avdmanager create avd -n test -k "system-images;android-22;google_apis;x86" 安装后发现没有挂载sdcard， 后来在android studio中修改上了&lt;/li&gt;
&lt;li&gt;cp ~/Library/Android/sdk/system-images/android-22/google_apis/x86/system.img ~/.android/avd/test.avd/system-qemu.img 拷贝之后，模拟器对system的修改就会被保存下载&lt;/li&gt;
&lt;li&gt;./emulator -avd test -port 5557 -writable-system …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Install Xposed on AVD&lt;/h1&gt;
&lt;p&gt;在avd上获取root权限，安装xposed framework&lt;/p&gt;
&lt;h3&gt;模拟器准备工作：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;./sdkmanager "system-images;android-22;google_apis;x86"&lt;/li&gt;
&lt;li&gt;./avdmanager create avd -n test -k "system-images;android-22;google_apis;x86" 安装后发现没有挂载sdcard， 后来在android studio中修改上了&lt;/li&gt;
&lt;li&gt;cp ~/Library/Android/sdk/system-images/android-22/google_apis/x86/system.img ~/.android/avd/test.avd/system-qemu.img 拷贝之后，模拟器对system的修改就会被保存下载&lt;/li&gt;
&lt;li&gt;./emulator -avd test -port 5557 -writable-system  这里需要指明解锁system&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;开始root：&lt;/h3&gt;
&lt;p&gt;参考https://stackoverflow.com/questions/5095234/how-to-get-root-access-on-android-emulator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adb install supersu.apk&lt;/li&gt;
&lt;li&gt;unzip flashable.zip&lt;/li&gt;
&lt;li&gt;adb root; adb remount&lt;/li&gt;
&lt;li&gt;cd flashable/your_emu_arch/; adb push su.pie /system/bin/su&lt;/li&gt;
&lt;li&gt;adb shell; su root; chmod 06755 /system/bin/su&lt;/li&gt;
&lt;li&gt;su --install; su --daemon&amp;; setenforce 0&lt;/li&gt;
&lt;li&gt;in emulator, open opensu and update bin, click normal button; reboot&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安装xposed：&lt;/h3&gt;
&lt;p&gt;下载xpose installer.apk， 在app中操作即可。&lt;/p&gt;
&lt;h3&gt;已知问题：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/htwenning/htwenning.github.io/issues/3"&gt;xpose-installer 下载框架的时候闪退&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>Profile in Python</title><link href="https://htwenning.github.io/profile-in-python.html" rel="alternate"></link><published>2018-09-11T00:00:00+08:00</published><updated>2018-09-11T00:00:00+08:00</updated><author><name>wenning</name></author><id>tag:htwenning.github.io,2018-09-11:/profile-in-python.html</id><summary type="html">&lt;h1&gt;Profile in Python&lt;/h1&gt;
&lt;p&gt;在不改变代码的情况下（比如在生产环境遇到的问题），profile python进程，曾经一个好的选择是pyflame。&lt;/p&gt;
&lt;p&gt;现在又发现一个不错的工具： py-spy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/uber/pyflame"&gt;pyflame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benfred/py-spy"&gt;py-spy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pyflame利用ptrace来采样函数调用，然后可以使用 flame graph打印svg显示火焰图。
在一些相对老的系统要配置好还是挺麻烦的。&lt;/p&gt;
&lt;p&gt;py-spy使用rust编写， 通过读进程内存来采样，可以直接使用pip安装！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;py-spy --pid 12345&lt;/p&gt;
&lt;p&gt;py-spy --flame profile.svg --pid 12345&lt;/p&gt;
&lt;/blockquote&gt;</summary><content type="html">&lt;h1&gt;Profile in Python&lt;/h1&gt;
&lt;p&gt;在不改变代码的情况下（比如在生产环境遇到的问题），profile python进程，曾经一个好的选择是pyflame。&lt;/p&gt;
&lt;p&gt;现在又发现一个不错的工具： py-spy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/uber/pyflame"&gt;pyflame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benfred/py-spy"&gt;py-spy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pyflame利用ptrace来采样函数调用，然后可以使用 flame graph打印svg显示火焰图。
在一些相对老的系统要配置好还是挺麻烦的。&lt;/p&gt;
&lt;p&gt;py-spy使用rust编写， 通过读进程内存来采样，可以直接使用pip安装！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;py-spy --pid 12345&lt;/p&gt;
&lt;p&gt;py-spy --flame profile.svg --pid 12345&lt;/p&gt;
&lt;/blockquote&gt;</content></entry><entry><title>Nginx Internal (protect your static resource)</title><link href="https://htwenning.github.io/nginx-internal-protect-your-static-resource.html" rel="alternate"></link><published>2018-08-31T00:00:00+08:00</published><updated>2018-08-31T00:00:00+08:00</updated><author><name>wenning</name></author><id>tag:htwenning.github.io,2018-08-31:/nginx-internal-protect-your-static-resource.html</id><summary type="html">&lt;h1&gt;Nginx Internal (protect your static resource)&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nginx internal
在location中使用internal标志，限制当前location仅对内部访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在服务端的response headers中添加x-accel头，并指向internal位置， nginx会访问指定位置
官方文档：https://www.nginx.com/resources/wiki/start/topics/examples/x-accel/&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;nginx配置实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/protected&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/Users/wenning/protected&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/doc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:8888&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python服务端实例， 这里以sanic为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/doc/&amp;lt;file&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;Nginx Internal (protect your static resource)&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nginx internal
在location中使用internal标志，限制当前location仅对内部访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在服务端的response headers中添加x-accel头，并指向internal位置， nginx会访问指定位置
官方文档：https://www.nginx.com/resources/wiki/start/topics/examples/x-accel/&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;nginx配置实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/protected&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/Users/wenning/protected&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/doc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:8888&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python服务端实例， 这里以sanic为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/doc/&amp;lt;file&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;projected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;X-Accel-Redirect&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/protected/{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Emacs with Jetbrain IDE</title><link href="https://htwenning.github.io/emacs-with-jetbrain-ide.html" rel="alternate"></link><published>2018-08-21T00:00:00+08:00</published><updated>2018-08-21T00:00:00+08:00</updated><author><name>wenning</name></author><id>tag:htwenning.github.io,2018-08-21:/emacs-with-jetbrain-ide.html</id><summary type="html">&lt;h1&gt;Emacs with Jetbrain IDE&lt;/h1&gt;
&lt;p&gt;为了启动的效率， 使用c/s形式的emacs；
推荐一个配置：https://korewanetadesu.com/emacs-on-os-x.html
下面摘抄一下&lt;/p&gt;
&lt;p&gt;启动一个emacs server：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Terminal&amp;quot;&lt;/span&gt;
   &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Applications/Emacs.app/Contents/MacOS/Emacs --daemon&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以一个frame启动一个emacs client：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Terminal&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -c -n &amp;amp;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;tell …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;Emacs with Jetbrain IDE&lt;/h1&gt;
&lt;p&gt;为了启动的效率， 使用c/s形式的emacs；
推荐一个配置：https://korewanetadesu.com/emacs-on-os-x.html
下面摘抄一下&lt;/p&gt;
&lt;p&gt;启动一个emacs server：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Terminal&amp;quot;&lt;/span&gt;
   &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Applications/Emacs.app/Contents/MacOS/Emacs --daemon&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以一个frame启动一个emacs client：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Terminal&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -c -n &amp;amp;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Emacs&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;activate&lt;/span&gt;
    &lt;span class="nb"&gt;on&lt;/span&gt; &lt;span class="k"&gt;error&lt;/span&gt;
        &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Applications/Emacs.app/Contents/MacOS/Emacs&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面两个脚本作为后续applescript的基础, 在 server没有响应的时候执行
在终端启动一个gui emacs&lt;/p&gt;
&lt;p&gt;emacsc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -e
/Applications/Emacs.app/Contents/MacOS/Emacs &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在终端启动一个emacs&lt;/p&gt;
&lt;p&gt;emacst&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -e
/Applications/Emacs.app/Contents/MacOS/Emacs -nw &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ec&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt;
&lt;span class="nv"&gt;EMACSCLIENT&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="nv"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Emacs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;MacOS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;emacsclient&lt;/span&gt;
&lt;span class="nv"&gt;exec&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;EMACSCLIENT&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;emacsc&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;et&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt;
&lt;span class="nv"&gt;EMACSCLIENT&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="nv"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Emacs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;MacOS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;emacsclient&lt;/span&gt;
&lt;span class="nv"&gt;exec&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;EMACSCLIENT&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;emacst&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加一些alias到.bash_profile, 替换系统自带的emacs命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;emacsclient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Applications/Emacs.app/Contents/MacOS/bin/emacsclient&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;emacs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ec&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;EDITOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ec&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动的时候新的frame是不能获得焦点的， 把下面的添加到init.el解决&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;featurep&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;ns-raise-emacs&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Raise Emacs.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ns-do-applescript&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tell application \&amp;quot;Emacs\&amp;quot; to activate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;ns-raise-emacs-with-frame&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Raise Emacs and select the provided frame.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-selected-frame&lt;/span&gt; &lt;span class="nv"&gt;frame&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;display-graphic-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ns-raise-emacs&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;after-make-frame-functions&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;ns-raise-emacs-with-frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;display-graphic-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ns-raise-emacs&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在jetbrain ide比如pycharm里面，&lt;/p&gt;
&lt;p&gt;preferences-&amp;gt; Tools-&amp;gt; External Tools-&amp;gt; +新建一个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Program： ec&lt;/li&gt;
&lt;li&gt;Arguments: $FilePath$&lt;/li&gt;
&lt;li&gt;Working directory: $FileDir$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以在keymap设置一个快捷键  比如command+e，&lt;/p&gt;
&lt;p&gt;这样可以直接使用emacsclient打开当前的文件&lt;/p&gt;</content></entry><entry><title>a little docker-compose</title><link href="https://htwenning.github.io/a-little-docker-compose.html" rel="alternate"></link><published>2018-07-12T00:00:00+08:00</published><updated>2018-07-12T00:00:00+08:00</updated><author><name>wenning</name></author><id>tag:htwenning.github.io,2018-07-12:/a-little-docker-compose.html</id><summary type="html">&lt;h1&gt;a little docker-compose&lt;/h1&gt;
&lt;p&gt;docker-compose 可以快速给一个临时的linux开发环境&lt;/p&gt;
&lt;p&gt;docker-compose run service_name&lt;/p&gt;
&lt;p&gt;--rm参数可以在退出的时候删除这个container&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目下面创建 docker-compose.yml, 内容如下
（cap_add和secutiry_opt用来保证container中可以正常使用gdb）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;version: &amp;#39;3&amp;#39;
services:
  app:
    image: &amp;quot;python:3.6&amp;quot;
    volumes:
      - .:/app
    ports:
      - &amp;quot;5000:5000&amp;quot;
    cap_add:
      - ALL
    security_opt:
      - seccomp:unconfined
    command: bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动并attach bash:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose run app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果上面指定了ports那么需要带上 --service-ports 参数才能把服务的ports暴露给host&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose run --service-ports app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;退出后container也就挂掉了，通过docker ps …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;a little docker-compose&lt;/h1&gt;
&lt;p&gt;docker-compose 可以快速给一个临时的linux开发环境&lt;/p&gt;
&lt;p&gt;docker-compose run service_name&lt;/p&gt;
&lt;p&gt;--rm参数可以在退出的时候删除这个container&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目下面创建 docker-compose.yml, 内容如下
（cap_add和secutiry_opt用来保证container中可以正常使用gdb）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;version: &amp;#39;3&amp;#39;
services:
  app:
    image: &amp;quot;python:3.6&amp;quot;
    volumes:
      - .:/app
    ports:
      - &amp;quot;5000:5000&amp;quot;
    cap_add:
      - ALL
    security_opt:
      - seccomp:unconfined
    command: bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动并attach bash:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose run app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果上面指定了ports那么需要带上 --service-ports 参数才能把服务的ports暴露给host&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose run --service-ports app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;退出后container也就挂掉了，通过docker ps -a 查看container_id, 后面再启动：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker start [container_id]&lt;/p&gt;
&lt;p&gt;docker attach [container_id]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者执行一个新的bash命令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker exec -it [container_id] bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据需要可以commit镜像&lt;/li&gt;
&lt;li&gt;可以写Dockerfile和更多的service, 利用docker-compose up启动&lt;/li&gt;
&lt;li&gt;docker-compose up用来启动一堆服务，没有交互式的概念&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://docs.docker.com/compose/&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>a little awk</title><link href="https://htwenning.github.io/a-little-awk.html" rel="alternate"></link><published>2018-07-11T18:28:00+08:00</published><updated>2018-07-11T18:28:00+08:00</updated><author><name>wenning</name></author><id>tag:htwenning.github.io,2018-07-11:/a-little-awk.html</id><summary type="html">&lt;h1&gt;a little awk&lt;/h1&gt;
&lt;p&gt;参考:
https://gregable.com/2010/09/why-you-should-know-just-little-awk.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认使用空格分割&lt;/li&gt;
&lt;li&gt;使用$符号选取字段&lt;/li&gt;
&lt;li&gt;NF是字段数, NR行号&lt;/li&gt;
&lt;li&gt;可以使用if进行判断语句&lt;/li&gt;
&lt;li&gt;print 打印后面的内容&lt;/li&gt;
&lt;li&gt;可以把字段存入变量，不用声明, 也不用考虑单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker images &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;
docker images &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{if($1 == &amp;quot;&amp;lt;none&amp;gt;&amp;quot;){print $3}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs docker rmi
docker images &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print &amp;quot;tag: &amp;quot;, $2}&amp;#39;&lt;/span&gt;
docker images &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{a += $NF …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;a little awk&lt;/h1&gt;
&lt;p&gt;参考:
https://gregable.com/2010/09/why-you-should-know-just-little-awk.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认使用空格分割&lt;/li&gt;
&lt;li&gt;使用$符号选取字段&lt;/li&gt;
&lt;li&gt;NF是字段数, NR行号&lt;/li&gt;
&lt;li&gt;可以使用if进行判断语句&lt;/li&gt;
&lt;li&gt;print 打印后面的内容&lt;/li&gt;
&lt;li&gt;可以把字段存入变量，不用声明, 也不用考虑单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker images &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;
docker images &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{if($1 == &amp;quot;&amp;lt;none&amp;gt;&amp;quot;){print $3}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs docker rmi
docker images &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print &amp;quot;tag: &amp;quot;, $2}&amp;#39;&lt;/span&gt;
docker images &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{a += $NF; print &amp;quot;total: &amp;quot;, a}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry></feed>